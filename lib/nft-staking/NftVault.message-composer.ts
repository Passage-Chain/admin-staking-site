/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ConfigForString, ExecuteMsg, ExecMsg, NftForString, QueryMsg, QueryMsg1, QueryBoundForTupleOfStringAndString, QueryBoundForString, QueryOptionsForTupleOfStringAndString, QueryOptionsForString, Addr, Expiration, Timestamp, Uint64, ArrayOfClaim, Claim, NftForAddr, ConfigForAddr, ArrayOfAddr, NullableUint128, Uint128, ArrayOfTupleOfAddrAndUint64, ArrayOfStakedNft, StakedNft } from "./NftVault.types";
export interface NftVaultMsg {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    rewardsCodeId,
    unstakingDurationSec
  }: {
    rewardsCodeId?: number;
    unstakingDurationSec?: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  createRewardAccount: ({
    denom,
    durationSec,
    label
  }: {
    denom: string;
    durationSec: number;
    label: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  stake: ({
    nfts,
    recipient
  }: {
    nfts: NftForString[];
    recipient?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unstake: ({
    nfts,
    recipient
  }: {
    nfts: NftForString[];
    recipient?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claim: ({
    recipient
  }: {
    recipient?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claimRewards: ({
    recipient
  }: {
    recipient?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class NftVaultMsgComposer implements NftVaultMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.createRewardAccount = this.createRewardAccount.bind(this);
    this.stake = this.stake.bind(this);
    this.unstake = this.unstake.bind(this);
    this.claim = this.claim.bind(this);
    this.claimRewards = this.claimRewards.bind(this);
  }
  updateConfig = ({
    rewardsCodeId,
    unstakingDurationSec
  }: {
    rewardsCodeId?: number;
    unstakingDurationSec?: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            rewards_code_id: rewardsCodeId,
            unstaking_duration_sec: unstakingDurationSec
          }
        })),
        funds: _funds
      })
    };
  };
  createRewardAccount = ({
    denom,
    durationSec,
    label
  }: {
    denom: string;
    durationSec: number;
    label: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_reward_account: {
            denom,
            duration_sec: durationSec,
            label
          }
        })),
        funds: _funds
      })
    };
  };
  stake = ({
    nfts,
    recipient
  }: {
    nfts: NftForString[];
    recipient?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          stake: {
            nfts,
            recipient
          }
        })),
        funds: _funds
      })
    };
  };
  unstake = ({
    nfts,
    recipient
  }: {
    nfts: NftForString[];
    recipient?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unstake: {
            nfts,
            recipient
          }
        })),
        funds: _funds
      })
    };
  };
  claim = ({
    recipient
  }: {
    recipient?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim: {
            recipient
          }
        })),
        funds: _funds
      })
    };
  };
  claimRewards = ({
    recipient
  }: {
    recipient?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim_rewards: {
            recipient
          }
        })),
        funds: _funds
      })
    };
  };
}
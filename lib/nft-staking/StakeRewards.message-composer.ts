/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Timestamp, Uint64, RewardAsset, Addr, InstantiateMsg, ExecuteMsg, ExecMsg, Uint128, QueryMsg, QueryMsg1, Config, NullableUserReward, Uint256, UserReward, CumulativeRewards } from "./StakeRewards.types";
export interface StakeRewardsMsg {
  contractAddress: string;
  sender: string;
  stakeChange: ({
    recipient,
    stakedAmount,
    totalStaked
  }: {
    recipient: string;
    stakedAmount: Uint128;
    totalStaked: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claimRewards: ({
    recipient,
    stakedAmount,
    totalStaked
  }: {
    recipient: string;
    stakedAmount: Uint128;
    totalStaked: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class StakeRewardsMsgComposer implements StakeRewardsMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.stakeChange = this.stakeChange.bind(this);
    this.claimRewards = this.claimRewards.bind(this);
  }
  stakeChange = ({
    recipient,
    stakedAmount,
    totalStaked
  }: {
    recipient: string;
    stakedAmount: Uint128;
    totalStaked: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          stake_change: {
            recipient,
            staked_amount: stakedAmount,
            total_staked: totalStaked
          }
        })),
        funds: _funds
      })
    };
  };
  claimRewards = ({
    recipient,
    stakedAmount,
    totalStaked
  }: {
    recipient: string;
    stakedAmount: Uint128;
    totalStaked: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim_rewards: {
            recipient,
            staked_amount: stakedAmount,
            total_staked: totalStaked
          }
        })),
        funds: _funds
      })
    };
  };
}
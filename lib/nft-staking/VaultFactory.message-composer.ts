/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, ExecMsg, QueryMsg, QueryMsg1, QueryBoundForUint64, QueryOptionsForUint64, Addr, ArrayOfTupleOfUint64AndAddr } from "./VaultFactory.types";
export interface VaultFactoryMsg {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    rewardsCodeId,
    vaultCodeId
  }: {
    rewardsCodeId?: number;
    vaultCodeId?: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  createVault: ({
    collections,
    unstakingDurationSec,
    vaultLabel
  }: {
    collections: string[];
    unstakingDurationSec: number;
    vaultLabel: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class VaultFactoryMsgComposer implements VaultFactoryMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.createVault = this.createVault.bind(this);
  }
  updateConfig = ({
    rewardsCodeId,
    vaultCodeId
  }: {
    rewardsCodeId?: number;
    vaultCodeId?: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            rewards_code_id: rewardsCodeId,
            vault_code_id: vaultCodeId
          }
        })),
        funds: _funds
      })
    };
  };
  createVault = ({
    collections,
    unstakingDurationSec,
    vaultLabel
  }: {
    collections: string[];
    unstakingDurationSec: number;
    vaultLabel: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_vault: {
            collections,
            unstaking_duration_sec: unstakingDurationSec,
            vault_label: vaultLabel
          }
        })),
        funds: _funds
      })
    };
  };
}